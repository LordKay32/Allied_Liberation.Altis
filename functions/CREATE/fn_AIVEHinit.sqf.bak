/*
	Installs various damage/smoke/kill/capture logic for vehicles
	Will set and modify the "originalSide" and "ownerSide" variables on the vehicle indicating side ownership
	If a rebel enters a vehicle, it will be switched to rebel side and added to vehDespawner

	Params:
	1. Object: Vehicle object
	2. Side: Side ownership for vehicle
*/

private _filename = "fn_AIVEHinit";
params ["_veh", "_side", ["_excludeTrails", false]];
if (isNil "_veh") exitWith {};

if !(isNil { _veh getVariable "ownerSide" }) exitWith
{
	// vehicle already initialized, just swap side and exit
	[_veh, _side] call A3A_fnc_vehKilledOrCaptured;
};

_veh setVariable ["originalSide", _side, true];
_veh setVariable ["ownerSide", _side, true];

// probably just shouldn't be called for these
if ((_veh isKindOf "Building") or (_veh isKindOf "ReammoBox_F")) exitWith {};

// this might need moving into a different function later
if (_side == teamPlayer) then
{
	clearMagazineCargoGlobal _veh;			// might need an exception on this for vehicle weapon mags?
	clearWeaponCargoGlobal _veh;
	clearItemCargoGlobal _veh;
	clearBackpackCargoGlobal _veh;
} else {
	clearWeaponCargoGlobal _veh;
};

// Sync the vehicle textures if necessary
_veh call A3A_fnc_vehicleTextureSync;

private _typeX = typeOf _veh;

//JB - add arsenal and statics to Ammo Trucks
if ((_side == teamPlayer) && (_typeX == vehSDKAmmo)) then {
	_veh addaction [ 
        (format ["<img image='%1' size='1' color='#ffffff'/>", "\A3\ui_f\data\GUI\Rsc\RscDisplayArsenal\spaceArsenal_ca.paa"] + format["<t size='1'> %1</t>", (localize "STR_A3_Arsenal")]), 
        JN_fnc_arsenal_handleAction, 
        [], 
        6, 
        true, 
        false, 
        "", 
        "alive _target && {_target distance _this < 5} && {vehicle player == player}" 
    ];
	[_veh] call HR_GRG_fnc_initGarage;
    _veh addAction ["Deploy Static", {if ([player,300] call A3A_fnc_enemyNearCheck) then {["Deploy Static", "You cannot deploy statics while there are enemies near you."] call A3A_fnc_customHint;} else {["AMMOTRUCK"] call SCRT_fnc_ui_createBuyVehicleMenu}},nil,0,false,true,"","(vehicle player == player) and (isPlayer _this) and (_this == _this getVariable ['owner',objNull])",4];
	_veh addaction [ 
        "Rearm nearby vehicles", 
        {params ["_target", "_caller", "_actionId", "_arguments"];
        _list = ((getPos _target) nearEntities [vehFIA, 50]) select {count allTurrets [_x, false] > 0};
    	{
    	[_x, 1] remoteExec ["setVehicleAmmoDef"];
    	// if (isPlayer crew) then {play sound for player?};
    	} forEach _list;}, 
        [], 
        6, 
        true, 
        true, 
        "", 
        "alive _target && {_target distance _this < 5}" 
    ];
	
	_veh addEventHandler ["Killed", {
	params ["_unit", "_killer"];
	removeAllActions  _unit;
	}];
};

//JB add functions to refuel/repair trucks
if ((_side == teamPlayer) && (_typeX == vehSDKFuel)) then {
	_veh addaction [ 
        "Refuel nearby vehicles", 
        {params ["_target", "_caller", "_actionId", "_arguments"];
        _list = ((getPos _target) nearEntities [["Car", "Tank", "APC"], 50]) select {side _x == teamPlayer};
    	{
    	_fuel = fuel _x;
    	// if (isPlayer crew) then {play sound for player?};
		while {_fuel < 0.99} do {
	    	_fuel = _fuel + 0.1;
	    	if (_fuel > 1) then {_fuel = 1};
    		[_x, _fuel] remoteExec ["setFuel"];
    		sleep 1;
    	};
    	} forEach _list;}, 
        [], 
        6, 
        true, 
        true, 
        "", 
        "alive _target && {_target distance _this < 5}" 
    ];
};
if ((_side == teamPlayer) && (_typeX == vehSDKRepair)) then {
	_veh addaction [ 
        "Repair nearby vehicles", 
        {
    	params ["_target", "_caller", "_actionId", "_arguments"];
    	_list = ((getPos _target) nearEntities [["Car", "Turret", "Tank", "APC"], 50]) select {side _x != west};
    	{
    	[_x, 0] remoteExec ["setDamage"];
    	// if (isPlayer crew) then {play sound for player?};
    	} forEach _list}, 
        [], 
        6, 
        true, 
        true, 
        "", 
        "alive _target && {_target distance _this < 5}" 
    ];
};

if ((_side == teamPlayer) && (_typeX == staticATteamPlayer)) then {
_veh addEventHandler ["Fired", { 
params ["_unit", "_weapon", "_muzzle", "_mode", "_ammo", "_magazine", "_projectile", "_gunner"]; 

if !(isPlayer (gunner _unit)) then {
	_target = getAttackTarget _unit; 
	if (_target isKindOf "man") then { 
		_unit loadMagazine [[0], "fow_w_57mm_6Pdr", "fow_30Rnd_57mm_HE"]; 
	} else {
		_unit loadMagazine [[0], "fow_w_57mm_6Pdr", "fow_10Rnd_57mm_APCR"];
	};
};
}];
};

if (_typeX in vehNormal || {_typeX in (vehAttack + vehBoats + vehAA)}) then {

	if !(_typeX in vehAttack) then {
		if (_veh isKindOf "Car") then {
			_veh addEventHandler ["HandleDamage",{if (((_this select 1) find "wheel" != -1) and ((_this select 4=="") or (side (_this select 3) != teamPlayer)) and (!isPlayer driver (_this select 0))) then {0} else {(_this select 2)}}];
			if ({"SmokeLauncher" in (_veh weaponsTurret _x)} count (allTurrets _veh) > 0) then
			{
				_veh setVariable ["within",true];
				_veh addEventHandler ["GetOut", {private ["_veh"]; _veh = _this select 0; if (side (_this select 2) != teamPlayer) then {if (_veh getVariable "within") then {_veh setVariable ["within",false]; [_veh] call A3A_fnc_smokeCoverAuto}}}];
				_veh addEventHandler ["GetIn", {private ["_veh"]; _veh = _this select 0; if (side (_this select 2) != teamPlayer) then {_veh setVariable ["within",true]}}];
			};
		};
	}
	else {
		if (_typeX in vehAPCs) then
		{
			_veh addEventHandler ["HandleDamage",{private ["_veh"]; _veh = _this select 0; if (!canFire _veh) then {[_veh] call A3A_fnc_smokeCoverAuto; _veh removeEventHandler ["HandleDamage",_thisEventHandler]};if (((_this select 1) find "wheel" != -1) and (_this select 4=="") and (!isPlayer driver (_veh))) then {0;} else {(_this select 2);}}];
			_veh setVariable ["within",true];
			_veh addEventHandler ["GetOut", {private ["_veh"];  _veh = _this select 0; if (side (_this select 2) != teamPlayer) then {if (_veh getVariable "within") then {_veh setVariable ["within",false];[_veh] call A3A_fnc_smokeCoverAuto}}}];
			_veh addEventHandler ["GetIn", {private ["_veh"];_veh = _this select 0; if (side (_this select 2) != teamPlayer) then {_veh setVariable ["within",true]}}];
		}
		else
		{
			if (_typeX in vehTanks) then
			{
				_veh addEventHandler ["HandleDamage",{private ["_veh"]; _veh = _this select 0; if (!canFire _veh) then {[_veh] call A3A_fnc_smokeCoverAuto;  _veh removeEventHandler ["HandleDamage",_thisEventHandler]}}];
				_veh addEventHandler ["GetIn", {
					_unit = _this select 2;
					if (!((_unit getVariable "unitType") in [USCrew,UKCrew]) and (!isPlayer _unit) and (_unit getVariable ["spawner",false]) and (side group _unit == teamPlayer)) then
					{
						moveOut _unit;
						["General", "Only tank crews can crew tanks"] call A3A_fnc_customHint;
					};
				}];
			}
			else		// never called? vehAttack is APCs+tank
			{
				_veh addEventHandler ["HandleDamage",{if (((_this select 1) find "wheel" != -1) and ((_this select 4=="") or (side (_this select 3) != teamPlayer)) and (!isPlayer driver (_this select 0))) then {0} else {(_this select 2)}}];
			};
		};
	};
} else {
	if (_typeX in vehPlanes) then {
		_veh addEventHandler ["GetIn",
		{
			_unit = _this select 2;
			if (!((_unit getVariable "unitType") in [USPilot,UKPilot]) and (!isPlayer _unit) and (_unit getVariable ["spawner",false]) and (side group _unit == teamPlayer)) then
			{
				moveOut _unit;
				["General", "Only pilots can crew an air vehicle"] call A3A_fnc_customHint;
			};
		}];
		
		_veh addEventHandler ["GetIn",
		{
			_unit = _this select 2;
			if (side group _unit == teamPlayer) then
			{
				_unit setVariable ["spawner",nil,true];
			};
		}];
		
		_veh addEventHandler ["GetOut",
		{
			_unit = _this select 2;
			if (side group _unit == teamPlayer) then
			{
				_unit setVariable ["spawner",true,true];
			};
		}];
		
		if (_veh isKindOf "Helicopter") then {
			if (_typeX in vehTransportAir) then {
				_veh setVariable ["within",true];
				_veh addEventHandler ["GetOut", {private ["_veh"];_veh = _this select 0; if ((isTouchingGround _veh) and (isEngineOn _veh)) then {if (side (_this select 2) != teamPlayer) then {if (_veh getVariable "within") then {_veh setVariable ["within",false]; [_veh] call A3A_fnc_smokeCoverAuto}}}}];
				_veh addEventHandler ["GetIn", {private ["_veh"];_veh = _this select 0; if (side (_this select 2) != teamPlayer) then {_veh setVariable ["within",true]}}];
			};
		};
	}
	else
	{
		if (_veh isKindOf "StaticWeapon") then
		{
			_veh setCenterOfMass [(getCenterOfMass _veh) vectorAdd [0, 0, -1], 0];

			if !(_typeX isKindOf "StaticMortar") then {
				[_veh, "static"] remoteExec ["A3A_fnc_flagAction", [teamPlayer,civilian], _veh];
				if (_side == teamPlayer && !isNil {serverInitDone}) then { [_veh] remoteExec ["A3A_fnc_updateRebelStatics", 2] };
			};
		};
	};
};

if (_side == civilian) then
{
	_veh addEventHandler ["HandleDamage",{if (((_this select 1) find "wheel" != -1) and (_this select 4=="") and (!isPlayer driver (_this select 0))) then {0;} else {(_this select 2);};}];
	_veh addEventHandler ["HandleDamage", {
		_veh = _this select 0;
		if (side(_this select 3) == teamPlayer) then
		{
			_driverX = driver _veh;
			if (side group _driverX == civilian) then {_driverX leaveVehicle _veh};
			_veh removeEventHandler ["HandleDamage", _thisEventHandler];
		};
	}];
};

private _artilleryTypes = vehMRLS + additionalShopArtillery + [CSATMortar, NATOMortar, SDKMortar, SDKArtillery];
if (NATOHowitzer != "not_supported") then {_artilleryTypes pushBack NATOHowitzer};
if (CSATHowitzer != "not_supported") then {_artilleryTypes pushBack CSATHowitzer};

if(_typeX in _artilleryTypes) then {
    [_veh, ["Fired", SCRT_fnc_common_triggerArtilleryResponseEH]] remoteExec ["addEventHandler", 2];
	if (!_excludeTrails) then {
		[_veh] call A3A_fnc_addArtilleryTrailEH;
	};
};

// EH behaviour:
// GetIn/GetOut/Dammaged: Runs where installed, regardless of locality
// Local: Runs where installed if target was local before or after the transition
// HandleDamage/Killed: Runs where installed, only if target is local
// MPKilled: Runs everywhere, regardless of target locality or install location
// Destruction is handled in an EntityKilled mission event handler, in case of locality changes

if (_side != teamPlayer) then
{
	// Vehicle stealing handler
	// When a rebel first enters a vehicle, fire capture function
	_veh addEventHandler ["GetIn", {

		params ["_veh", "_role", "_unit"];
		if (side group _unit != teamPlayer) exitWith {};		// only rebels can flip vehicles atm
		private _oldside = _veh getVariable ["ownerSide", teamPlayer];
		if (_oldside != teamPlayer) then
		{
			[3, format ["%1 switching side from %2 to rebels", typeof _veh, _oldside], "fn_AIVEHinit"] call A3A_fnc_log;
			[_veh, teamPlayer, true] call A3A_fnc_vehKilledOrCaptured;
		};
		_veh removeEventHandler ["GetIn", _thisEventHandler];
	}];
};

if(_veh isKindOf "Air") then
{
    //Start airspace control script if rebel player enters
    _veh addEventHandler
    [
        "GetIn",
        {
            params ["_veh", "_role", "_unit"];
            if((side (group _unit) == teamPlayer) && {isPlayer _unit}) then
            {
                [_veh] spawn A3A_fnc_airspaceControl;
            };
        }
    ];


    _veh addEventHandler
    [
        "IncomingMissile",
        {
            params ["_target", "_ammo", "_vehicle", "_instigator"];

			if ((random 100) > 10) exitWith {}; 

            private _group = group driver _target;
            private _supportTypes = [_group, _vehicle] call A3A_fnc_chooseSupport;
            _supportTypes = _supportTypes - ["QRF"];
            private _reveal = [getPos _vehicle, side _group] call A3A_fnc_calculateSupportCallReveal;
            [_vehicle, 4, _supportTypes, side _group, _reveal] remoteExec ["A3A_fnc_sendSupport", 2];
        }
    ]
};

// Handler to prevent vehDespawner deleting vehicles for an hour after rebels exit them

_veh addEventHandler ["GetOut", {
	params ["_veh", "_role", "_unit"];
	if !(_unit isEqualType objNull) exitWith {
		[1, format ["GetOut handler weird input: %1, %2, %3", _veh, _role, _unit], "fn_AIVEHinit"] call A3A_fnc_log;
	};
	if (side group _unit == teamPlayer) then {
		_veh setVariable ["despawnBlockTime", time + 3600];			// despawner always launched locally
	};
}];


//add logistics loading to loadable objects
if([typeOf _veh] call A3A_fnc_logistics_isLoadable) then {[_veh] call A3A_fnc_logistics_addLoadAction;};

// deletes vehicle if it exploded on spawn...
[_veh] spawn A3A_fnc_cleanserVeh;